# Box.GridPage #

---

一个用来分页的封装组件

## 属性 ##

**templates**

gridpage的主体模板，包含主体内容和下面的按钮区域
 
>主模板里渲染的页面只能放在templates里，并且应在contentElements指定元素，getContentData里可以获取渲染的内容元素

```
templates: {
        //查询按钮(当没有高级查询条件的时候使用)
        searchBtn: [
            '<div class="k-button-group" data-overflow="auto" style="visibility: visible;display:inline;">' +
            '<a class="searchBtn k-button k-info k-button-icontext k-group-start {theme}">' +
            '<span class="k-sprite fa {icon} "></span>{text}</a>' +
            '<a class="resetBtn k-button k-button-icontext k-group-end" style=" margin-left: 5px;  ">' +
            '<span class="k-sprite fa fa-refresh"></span>重置</a>' +
            '</div>'
        ],
        // 在调用的类里面添加   例如: customshow: ['<div>testtest</div>'] , 可以显示在table-customshow里面
        main: [
            '<div class="hy-gridpage">' +
            '<div class="table-customshow"></div>' +
            '<div class="table-toolbar k-toolbar k-widget k-toolbar-resizable"></div>' +
            '<div class="table-body" style="margin-top: -1px;"></div>' +
            '</div>'
        ],
    },
```  


默认工具栏按钮的配置

```
  DEFAULT_BUTTON_CONFIG: [
        {
            name: '', //按钮的名字,需要唯一，这个属性一定要设置
            text: '', //按钮显示的文字
            icon: '', //使用fontawesome的图标
            theme: "", //k-primary,k-info,k-success,k-warning,k-danger
            handler: '', //点击按钮的处理函数，可以自定义函数也可直接使用封装好的函数
            hidden：false
        },
    ],
```

默认查询条件的配置

```
  DEFAULT_SEARCH_CONFIG: {
            name: '', //这个name后面会用作查询条件的field,所以需要跟字段名一样
            text: '', //查询条件显示的名字
            type: 'text', // 有这些类型: text  checkbox date  rangeDate comboBox multiselect hide(不显示在页面上)
            operator: 'contains', //The supported operators are: "eq" (equal to), "neq" (not equal to), "lt" (less than), "lte" (less than or equal to), "gt" (greater than), "gte" (greater than or equal to), "startswith", "endswith", "contains".
            renderData: '', //渲染的时候用的数据,
            isAdvanced: false, //是否属于高级查询条件
            //  isResetBtnHide: false,
            value: '', //初始化的值,
            placeholder: '', //只有当type为text,comboBox时才有效
            width: '192px', //默认的宽度,允许的格式:数值(100),字符串("150px")
            isRequired: false //是否必填
        }
```

查询条件实例

```
table_search:[
{
        name: 'IsForbidden',//这个name后面会用作查询条件的field,所以需要跟字段名一样
        text: '是否禁用',
        type: 'comboBox',// text radioBtn checkbox date
        isAdvanced: true,
        value: 'false',
        renderData: [
        {
           value: 'true',
           text: '是'
        },
        {
           value: 'false',
           text: '否'
        }
        ]
}
```

**table_search**`(String)`

查询条件

> 如果是数组的话,就是内置的查询,如果是字符串的话,就是自定义的查询控件类名,自定义类一定要包含getFilter() 来返回有效的查询条件

```
table_search: null, 
```

**serverFiltering**`:boolean`

服务器过滤

```
serverFiltering: true,
```

**enableExport**`:boolean`

是否将控件数据导出

```
enableExport: false,
```

**ajaxUrl**`(String)`

请求后台数据的url

```
ajaxUrl: 'api/User/userProperty',
```

**autoLoadData**`:boolean`

初始化完成后是否自动加载数据,如果为false,需要手动调用search 获取数据

```
autoLoadData: false,
```

**reset_btn_hide**`:boolean`

控制是否显示重置按钮

```
reset_btn_hide: false,  //控制不显示重置按钮
```

**search_btn_hide**`:boolean`

控制是否显示查询按钮

```
search_btn_hide: false, //控制不显示查询按钮
```

**table_buttons**

工具栏里的按钮

```
table_buttons: [

], 
```

**pageabledisabled**`:boolean`

控制是否显示分页

```
pageabledisabled: false, //控制不显示分页
```

**table_filterable**`:boolean`

是否显示列的过滤条件

```
table_filterable: false,
```

**table_serverSorting**`:boolean`

是否服务端排序

```
table_serverSorting: true,
```

**default_search_params**`(String)`

在查询初始化完成后,可以默认的设置一些查询条件,或者从其他页面跳转过来的时候,需要默认加一些查询条件

```
default_search_params: null,
```

**table_columns**

自定义表格

```
table_columns: [
        {
            field: "RealName",  绑定的字段 
            title: "用户名",   字段显示的名称
            sortable: false,   是否支持排序
            attributes: {     //向列添加一些属性
                "class": "table-cell",
                style: "text-align: right; font-size: 14px"
            },
            template: function (dataItem) {  //自定义列
                return "<strong>" + kendo.htmlEncode(dataItem.name) + "</strong>";
            }
        }
    ],
```

**table_sortable**`:boolean`

是否允许排序

```
table_sortable: true, 
```

**table_selectable**`(String)`

> "multi" 多选框. "single"单选框，  false  不需要选择

```
table_selectable: false, 
```

**table_showselectall**`:boolean`


```
 table_showselectall: false,
```

**table_order**

排序字段

```
 table_order: { field: "age", dir: "desc" }，
```

## 方法 ##

**fnGetSelectedRows**`:function`

获取选择的行,返回选择的行的数据

```
//通过实例化来调用方法
var gridpage=new Box.GridPage();  //Box.GridPage 代表继承自Box.Panel的任意组件
gridpage.fnGetSelectedRows();


//通过继承组件来直接调用
Box.define('HY.user.userProperty', {
 extend: 'Box.GridPage',
 init: function () {
       this.fnGetSelectedRows();
 }
});
```

**fnRefresh**`:function`

刷新列表

```
var gridpage=new Box.GridPage(); 
gridpage.fnRefresh();

```

**fnToggleAdvancedQuery**`:function`

显示(隐藏)高级搜索

```
fnToggleAdvancedQuery: function () {
        this.el.advancedSearch.slideToggle();
        this.el.searchLayer.toggle();
    },
```

**fnHideFilter**`(String name):function`

隐藏单个的过滤条件

```
fnHideFilter: function (name) {
        this.filters[name].hide();
    },

```

**fnShowFilter**`(String name):function`

显示单个的过滤条件

```
fnShowFilter: function (name) {
        this.filters[name].show();
    },

```

## 事件 ##

****


```

```
